[{"F:\\Projects\\React\\spotifychart\\src\\index.js":"1","F:\\Projects\\React\\spotifychart\\src\\components\\app\\app.js":"2","F:\\Projects\\React\\spotifychart\\src\\components\\App\\App.js":"3","F:\\Projects\\React\\spotifychart\\src\\components\\login\\login.js":"4","F:\\Projects\\React\\spotifychart\\src\\util\\spotify.js":"5","F:\\Projects\\React\\spotifychart\\src\\util\\Spotify.js":"6","F:\\Projects\\React\\spotifychart\\src\\components\\Ranking\\Ranking.js":"7","F:\\Projects\\React\\spotifychart\\src\\components\\Artist\\Artist.js":"8","F:\\Projects\\React\\spotifychart\\src\\components\\Artists\\Artists.js":"9","F:\\Projects\\React\\spotifychart\\src\\components\\Tracks\\Tracks.js":"10","F:\\Projects\\React\\spotifychart\\src\\components\\Track\\Track.js":"11","F:\\Projects\\React\\spotifychart\\src\\components\\GenreChart\\GenreChart.js":"12","F:\\Projects\\React\\spotifychart\\src\\components\\Stats\\Stats.js":"13","F:\\Projects\\React\\spotifychart\\src\\components\\PopularityStats\\PopularityStats.js":"14","F:\\Projects\\React\\spotifychart\\src\\util\\exampleData.js":"15","F:\\Projects\\React\\spotifychart\\src\\components\\ControlPanel\\ControlPanel.js":"16"},{"size":165,"mtime":1607205732069,"results":"17","hashOfConfig":"18"},{"size":0,"mtime":1607115899150,"results":"19","hashOfConfig":"18"},{"size":9159,"mtime":1609801689382,"results":"20","hashOfConfig":"18"},{"size":151,"mtime":1608147091366,"results":"21","hashOfConfig":"18"},{"size":4590,"mtime":1609799259296,"results":"22","hashOfConfig":"18"},{"size":2031,"mtime":1607128017699,"results":"23","hashOfConfig":"18"},{"size":2516,"mtime":1609786501187,"results":"24","hashOfConfig":"18"},{"size":1011,"mtime":1609799346875,"results":"25","hashOfConfig":"18"},{"size":2820,"mtime":1609800432492,"results":"26","hashOfConfig":"18"},{"size":2781,"mtime":1609800506237,"results":"27","hashOfConfig":"18"},{"size":2130,"mtime":1609880645281,"results":"28","hashOfConfig":"18"},{"size":3641,"mtime":1609795298462,"results":"29","hashOfConfig":"18"},{"size":1250,"mtime":1609797070474,"results":"30","hashOfConfig":"18"},{"size":1753,"mtime":1609800666743,"results":"31","hashOfConfig":"18"},{"size":285353,"mtime":1609797957459,"results":"32","hashOfConfig":"18"},{"size":2810,"mtime":1609795561587,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"zx2dlm",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"F:\\Projects\\React\\spotifychart\\src\\index.js",[],["68","69"],"F:\\Projects\\React\\spotifychart\\src\\components\\app\\app.js",[],"F:\\Projects\\React\\spotifychart\\src\\components\\App\\App.js",["70","71"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport Spotify from '../../util/spotify';\r\nimport Ranking from '../Ranking/Ranking';\r\nimport Stats from '../Stats/Stats';\r\nimport { exampleSortedArtists, exampleSortedTracks } from '../../util/exampleData'\r\n\r\nimport '../../normalize.css';\r\nimport './app.css';\r\n\r\nconst App = () => {\r\n    const [sortedArtists, setSortedArtists] = useState([]);\r\n    const [sortedTracks, setSortedTracks] = useState([]);\r\n    const [sortedGenres, setSortedGenres] = useState([]);\r\n    const [timeRange, setTimeRange] = useState(0);\r\n    const [maxLength, setMaxLength] = useState(5);\r\n    const [ArtistItemOrder, setArtistItemOrder] = useState('descending');\r\n    const [TrackItemOrder, setTrackItemOrder] = useState('descending');\r\n    const [ArtistItemMode, setArtistItemMode] = useState('plays');\r\n    const [TrackItemMode, setTrackItemMode] = useState('plays');\r\n    const [averageArtistPopularity, setAverageArtistPopularity] = useState();\r\n    const [averageTrackPopularity, setAverageTrackPopularity] = useState();\r\n    const [animate, setAnimate] = useState(true);\r\n    const [dataMessage, setDataMessage] = useState('No data found...');\r\n\r\n    const changeTimeRange = e => {\r\n        setAnimate(true);\r\n        switch (e.target.id){\r\n            case 'farTimeRange' :\r\n                setTimeRange(0);\r\n                break;\r\n            case 'mediumTimeRange' :\r\n                setTimeRange(1);\r\n                break;\r\n            case 'shortTimeRange' :\r\n                setTimeRange(2);\r\n                break;\r\n            default :\r\n                setTimeRange(0);\r\n        }\r\n    }\r\n\r\n    const changeMaxLength = e => {\r\n        setAnimate(false);\r\n        switch (e.target.id){\r\n            case 'maxLength5' :\r\n                setMaxLength(5);\r\n                break;\r\n            case 'maxLength10' :\r\n                setMaxLength(10);\r\n                break;\r\n            case 'maxLength25' :\r\n                setMaxLength(25);\r\n                break;\r\n            case 'maxLength50' :\r\n                setMaxLength(50);\r\n                break;\r\n            default :\r\n                setMaxLength(5);\r\n        }\r\n    }\r\n\r\n    const rankingSort = e => {\r\n        setAnimate(false);\r\n        let sortTarget;\r\n        let itemOrderSort = false;\r\n        let sort;\r\n\r\n        if (e.target.classList.contains('artistsSortBtn')){\r\n            sort = [...sortedArtists];\r\n            sortTarget = setSortedArtists;\r\n            itemOrderSort = ArtistItemOrder === 'ascending' ? true : false;\r\n            e.target.id === 'sortArtistsPopularityBtn' \r\n                ? setArtistItemMode('popularity') \r\n                : setArtistItemMode('plays')\r\n        } else if (e.target.classList.contains('tracksSortBtn')){\r\n            sort = [...sortedTracks];\r\n            sortTarget = setSortedTracks;\r\n            itemOrderSort = TrackItemOrder === 'ascending' ? true : false;\r\n            e.target.id === 'sortTracksPopularityBtn' \r\n                ? setTrackItemMode('popularity') \r\n                : setTrackItemMode('plays') \r\n        }\r\n\r\n        if (e.target.classList.contains('sortPlaysBtn')){\r\n            sort.forEach(arr => arr.sort((a, b) => a.playsRank - b.playsRank));\r\n        } else if (e.target.classList.contains('sortPopularityBtn')){\r\n            sort.forEach(arr => arr.sort((a, b) => b.popularity - a.popularity));\r\n        }\r\n\r\n        if (itemOrderSort) { sort.forEach(arr => arr.reverse()) }\r\n\r\n        sortTarget(sort);\r\n    }\r\n\r\n    const sortOrder = e => {\r\n        setAnimate(false);\r\n        let sort = [];\r\n\r\n        if ((e.target.classList.contains('artistsSortBtn'))) {\r\n            sort.push([...sortedArtists]);\r\n\r\n            ArtistItemOrder === 'descending' \r\n            ? setArtistItemOrder('ascending') \r\n            : setArtistItemOrder('descending');\r\n\r\n        } else if (e.target.id === 'sortTracksOrderBtn') {\r\n            sort.push([...sortedTracks]);\r\n\r\n            TrackItemOrder === 'descending'\r\n            ? setTrackItemOrder('ascending') \r\n            : setTrackItemOrder('descending');\r\n\r\n        } else if (e.target.id === 'loadExampleDataBtn' || 'loadSpotifyDataBtn'){\r\n            if (ArtistItemOrder === 'ascending') {\r\n                sort.push([...sortedArtists]);\r\n                setArtistItemOrder('descending')\r\n            }\r\n            if (TrackItemOrder === 'ascending') {\r\n                sort.push([...sortedTracks]);\r\n                setTrackItemOrder('descending')\r\n            }\r\n        }\r\n\r\n        sort.forEach(itemList => itemList.forEach(arr => arr.reverse()));\r\n    }\r\n\r\n    const getFavoirteGenres = () => {\r\n        let returnedGenres = [];\r\n        let favGenres = [];\r\n        let artistsPopularity = [];\r\n        let tracksPopularity = [];\r\n\r\n        if (sortedTracks.length === 0) {\r\n            return;\r\n        }\r\n        \r\n        const reducer = (acc, cur) => acc + cur;\r\n\r\n        for (let i = 0; i < sortedArtists.length; i++){\r\n            returnedGenres.push([[],[]]);\r\n            if (favGenres[i] === undefined){\r\n                    favGenres[i] = {};\r\n                }\r\n            if (artistsPopularity[i] === undefined) {\r\n                artistsPopularity[i] = [];\r\n            }\r\n            if (tracksPopularity[i] === undefined) {\r\n                tracksPopularity[i] = [];\r\n            }\r\n\r\n            for (let j = 0; j < sortedArtists[i].length; j++){\r\n                for (let k = 0; k < sortedArtists[i][j].genresRaw.length; k++){\r\n                    favGenres[i][sortedArtists[i][j].genresRaw[k]] = \r\n                    (favGenres[i][sortedArtists[i][j].genresRaw[k]] || 0) + 1;\r\n                }\r\n                artistsPopularity[i].push(sortedArtists[i][j].popularity);\r\n                tracksPopularity[i].push(sortedTracks[i][j].popularity);\r\n            }\r\n            let sort = Object.fromEntries(Object.entries\r\n                (favGenres[i]).sort(([,a],[,b]) => b - a));\r\n            for (const [key, value] of Object.entries(sort)){\r\n                returnedGenres[i][0].push(key);\r\n                returnedGenres[i][1].push(value);\r\n            }\r\n            favGenres[i] = sort;  \r\n            \r\n            artistsPopularity[i] = Math.round(artistsPopularity[i].reduce(reducer) / artistsPopularity[i].length);\r\n            tracksPopularity[i] = Math.round(tracksPopularity[i].reduce(reducer) / tracksPopularity[i].length);\r\n            setAverageTrackPopularity(tracksPopularity);\r\n            setAverageArtistPopularity(artistsPopularity);\r\n        }\r\n        setSortedGenres(returnedGenres);\r\n    }\r\n\r\n    const getSpotifyData = (e) => {\r\n        let artistData = [];\r\n        let trackData = [];\r\n        setAnimate(true);\r\n\r\n        Spotify.getSpotifyData().then(spotifyResponse => {\r\n            for (let a = 0; a < spotifyResponse.length; a++){\r\n                for (let b = 0; b < spotifyResponse[a].length; b++){\r\n                    spotifyResponse[a][b].playsRank = b + 1;\r\n                }\r\n            }\r\n\r\n            for (let i = 0; i < spotifyResponse.length; i++) {\r\n                if(spotifyResponse[i][0].type === 'artist') {\r\n                    artistData.push(spotifyResponse[i]);\r\n                } else if (spotifyResponse[i][0].type === 'track') {\r\n                    trackData.push(spotifyResponse[i]);\r\n                }\r\n            }\r\n            sortOrder(e);\r\n            setArtistItemOrder('descending');\r\n            setSortedArtists(artistData);\r\n            setSortedTracks(trackData);\r\n            })\r\n    }\r\n\r\n    const getExampleData = (e) => {\r\n        setAnimate(true);\r\n        setSortedArtists(exampleSortedArtists);\r\n        setSortedTracks(exampleSortedTracks);\r\n        setArtistItemOrder('descending');\r\n        setTrackItemOrder('descending');\r\n        sortOrder(e);\r\n    }\r\n\r\n    // optimize this!\r\n    useEffect(() => {\r\n           getFavoirteGenres();\r\n        }, [sortedTracks], []);\r\n\r\n    return (\r\n        <div className='app'>\r\n            <Stats \r\n                sortedGenres={sortedGenres}\r\n                averageArtistPopularity={averageArtistPopularity}\r\n                averageTrackPopularity={averageTrackPopularity}\r\n                changeTimeRange={changeTimeRange}\r\n                timeRange={timeRange}\r\n                getSpotifyData={getSpotifyData}\r\n                getExampleData={getExampleData}\r\n                animate={animate}\r\n                dataMessage={dataMessage}\r\n                />\r\n            <Ranking\r\n                sortedGenres={sortedGenres}\r\n                sortedArtists={sortedArtists}\r\n                timeRange={timeRange}\r\n                sortedTracks={sortedTracks}\r\n                maxLength={maxLength}\r\n                changeMaxLength={changeMaxLength}\r\n                ArtistItemOrder={ArtistItemOrder}\r\n                TrackItemOrder={TrackItemOrder}\r\n                sortOrder={sortOrder}\r\n                rankingSort={rankingSort}\r\n                ArtistItemMode={ArtistItemMode}\r\n                setArtistItemMode={setArtistItemMode}\r\n                dataMessage={dataMessage}\r\n                TrackItemMode={TrackItemMode}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;","F:\\Projects\\React\\spotifychart\\src\\components\\login\\login.js",[],"F:\\Projects\\React\\spotifychart\\src\\util\\spotify.js",[],"F:\\Projects\\React\\spotifychart\\src\\util\\Spotify.js",["72","73","74"],"F:\\Projects\\React\\spotifychart\\src\\components\\Ranking\\Ranking.js",[],"F:\\Projects\\React\\spotifychart\\src\\components\\Artist\\Artist.js",[],"F:\\Projects\\React\\spotifychart\\src\\components\\Artists\\Artists.js",[],"F:\\Projects\\React\\spotifychart\\src\\components\\Tracks\\Tracks.js",[],"F:\\Projects\\React\\spotifychart\\src\\components\\Track\\Track.js",[],"F:\\Projects\\React\\spotifychart\\src\\components\\GenreChart\\GenreChart.js",[],"F:\\Projects\\React\\spotifychart\\src\\components\\Stats\\Stats.js",[],"F:\\Projects\\React\\spotifychart\\src\\components\\PopularityStats\\PopularityStats.js",[],"F:\\Projects\\React\\spotifychart\\src\\util\\exampleData.js",[],"F:\\Projects\\React\\spotifychart\\src\\components\\ControlPanel\\ControlPanel.js",[],{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","severity":1,"message":"80","line":24,"column":25,"nodeType":"81","messageId":"82","endLine":24,"endColumn":39},{"ruleId":"83","severity":1,"message":"84","line":214,"column":12,"nodeType":"85","endLine":214,"endColumn":26,"suggestions":"86"},{"ruleId":"79","severity":1,"message":"87","line":1,"column":8,"nodeType":"81","messageId":"82","endLine":1,"endColumn":13},{"ruleId":"88","severity":1,"message":"89","line":60,"column":47,"nodeType":"90","messageId":"91","endLine":60,"endColumn":48,"fix":"92"},{"ruleId":"93","severity":1,"message":"94","line":62,"column":13,"nodeType":"95","messageId":"96","endLine":73,"endColumn":15},"no-native-reassign",["97"],"no-negated-in-lhs",["98"],"no-unused-vars","'setDataMessage' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getFavoirteGenres'. Either include it or remove the dependency array.","ArrayExpression",["99"],"'Login' is defined but never used.","dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"100","text":"101"},"no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","no-global-assign","no-unsafe-negation",{"desc":"102","fix":"103"},[2174,2189],"\r\n            .","Update the dependencies array to be: [getFavoirteGenres, sortedTracks]",{"range":"104","text":"105"},[7893,7907],"[getFavoirteGenres, sortedTracks]"]